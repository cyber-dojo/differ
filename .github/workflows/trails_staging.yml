name: Reports Trails to https://staging.app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}   # False
  KOSLI_HOST: ${{ vars.KOSLI_HOST_STAGING }} # https://staging.app.kosli.com
  KOSLI_ORG: cyber-dojo-trails
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}         # differ
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS_STAGING }}

jobs:

  kosli-trail:
    runs-on: ubuntu-latest
    outputs:
      image_tag:   ${{ steps.variables.outputs.image_tag }}
      image_name:  ${{ steps.variables.outputs.image_name }}
      kosli_trail: ${{ steps.variables.outputs.kosli_trail }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow "${{ env.KOSLI_FLOW }}" 
            --description="UX for a group practice dashboard" 
            --template-file=.kosli.yml

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${GITHUB_SHA}"

      - name: Set outputs
        id: variables
        run: |
          IMAGE_TAG=${GITHUB_SHA:0:7}
          echo "image_tag=${IMAGE_TAG}" >> ${GITHUB_OUTPUT}       
          echo "image_name=cyberdojo/${{ env.KOSLI_FLOW }}:${IMAGE_TAG}" >> ${GITHUB_OUTPUT}          
          echo "kosli_trail=${GITHUB_SHA}" >> ${GITHUB_OUTPUT}


  pull-request:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    env:
      KOSLI_TRAIL: ${{ needs.kosli-trail.outputs.kosli_trail }}
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report pull-request evidence to Kosli
        run:
          kosli attest pullrequest github
            --github-token=${{ secrets.GITHUB_TOKEN }}
            --name=differ.pull-request


  lint:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    env:
      KOSLI_TRAIL: ${{ needs.kosli-trail.outputs.kosli_trail }}
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Run Rubocop linter on source, attest results to Kosli Trail
        env:
          KOSLI_EVIDENCE_PATHS: /tmp/evidence/lint
        run: |
          gem install rubocop
          mkdir -p "${KOSLI_EVIDENCE_PATHS}"
          set +e
          rubocop --raise-cop-error . | tee "${KOSLI_EVIDENCE_PATHS}"/rubocop.log
          STATUS=${PIPESTATUS[0]}
          set -e
          
          KOSLI_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
          cp .rubocop.yml "${KOSLI_EVIDENCE_PATHS}"
          kosli attest generic \
            --compliant="${KOSLI_COMPLIANT}" \
            --evidence-paths="${KOSLI_EVIDENCE_PATHS}" \
            --name=differ.lint
          exit ${STATUS}                  


  build-image:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    env:
      KOSLI_TRAIL: ${{ needs.kosli-trail.outputs.kosli_trail }}
      IMAGE_NAME:  ${{ needs.kosli-trail.outputs.image_name }}
    outputs:
      kosli_fingerprint: ${{ steps.variables.outputs.kosli_fingerprint }}
    steps:
      - uses: actions/checkout@v4

      - name: Wait for image to be built in main.yml
        run:
          ./sh/wait_for_image.sh "${IMAGE_NAME}"

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image to Kosli flow
        run:
          kosli attest artifact "${IMAGE_NAME}" 
            --artifact-type=docker          
            --name=differ

      - name: Set outputs
        id: variables
        run: |
          FINGERPRINT=$(kosli fingerprint "${IMAGE_NAME}" --artifact-type=docker)
          echo "kosli_fingerprint=${FINGERPRINT}" >> ${GITHUB_OUTPUT}


  unit-tests:
    needs: [build-image, kosli-trail]
    runs-on: ubuntu-latest
    env:
      KOSLI_TRAIL: ${{ needs.kosli-trail.outputs.kosli_trail }}
      IMAGE_NAME:  ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
    steps:
      - uses: actions/checkout@v4

      - name: Run tests, saves results to test/reports/evidence.json file
        run: |
          source ./sh/run_tests_with_coverage.sh
          if run_tests_with_coverage; then
            echo "KOSLI_COMPLIANT=true" >> ${GITHUB_ENV}
          else
            echo "KOSLI_COMPLIANT=false" >> ${GITHUB_ENV}
          fi

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest junit test results to Kosli
        run:
          kosli attest junit "${IMAGE_NAME}" 
              --name=differ.unit-test 
              --results-dir=test/reports/junit

      - name: Attest branch-coverage results to Kosli
        env:
          KOSLI_COMPLIANT: ${{ env.KOSLI_COMPLIANT }}
        run:
          kosli attest generic "${IMAGE_NAME}" 
              --compliant=${KOSLI_COMPLIANT} 
              --evidence-paths=./test/reports/evidence.json 
              --name=differ.branch-coverage


  snyk-scan:
    needs: [build-image, kosli-trail]
    runs-on: ubuntu-latest
    env:
      KOSLI_TRAIL:       ${{ needs.kosli-trail.outputs.kosli_trail }}
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        run:
          snyk container test ${IMAGE_NAME} 
            --file=Dockerfile 
            --json-file-output=snyk.json 
            --policy-path=.snyk

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest Snyk results to Kosli
        run:
          kosli attest snyk ${IMAGE_NAME} 
            --name=differ.snyk-scan  
            --scan-results=snyk.json


  sdlc-control-gate:
    needs: [pull-request, lint, unit-tests, snyk-scan, kosli-trail, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit-the-flow
        run:
          kosli assert artifact ${IMAGE_NAME}


  approve-deployment-to-beta:
    needs: [sdlc-control-gate, kosli-trail, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
      KOSLI_ENVIRONMENT: aws-beta
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run:
          kosli report approval ${IMAGE_NAME} 
            --approver="${{ github.actor }}"

      - name: Report expected deployment to Kosli
        run:
          kosli expect deployment ${IMAGE_NAME} 
            --description="Deployed to ${KOSLI_ENVIRONMENT} in Github Actions pipeline"


  deploy-to-beta:
    needs: [approve-deployment-to-beta, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_ENVIRONMENT: aws-beta
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment to aws-beta in main.yml
        run:
          ./sh/wait_for_deployment.sh 
              "${IMAGE_NAME}" 
              "${{ env.KOSLI_HOST }}" 
              "${{ env.KOSLI_API_TOKEN }}" 
              "${{ env.KOSLI_ORG }}" 
              "${KOSLI_ENVIRONMENT}"


  approve-deployment-to-prod:
    needs: [deploy-to-beta, kosli-trail, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
      KOSLI_ENVIRONMENT: aws-prod
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run:
          kosli report approval ${IMAGE_NAME} 
            --approver="${{ github.actor }}"

      - name: Report expected deployment to Kosli
        run:
          kosli expect deployment ${IMAGE_NAME} 
            --description="Deployed to ${KOSLI_ENVIRONMENT} in Github Actions pipeline"


  deploy-to-prod:
    needs: [approve-deployment-to-prod, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_ENVIRONMENT: aws-prod
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment to aws-prod in main.yml
        run:
          ./sh/wait_for_deployment.sh 
              "${IMAGE_NAME}" 
              "${{ env.KOSLI_HOST }}" 
              "${{ env.KOSLI_API_TOKEN }}" 
              "${{ env.KOSLI_ORG }}" 
              "${KOSLI_ENVIRONMENT}"
    

#  push-latest:
#    needs: [deploy-to-prod, kosli-trail]
#    runs-on: ubuntu-latest
#    env:
#      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USER }}
#          password: ${{ secrets.DOCKER_PASS }}
#
#      - name: Tag image to :latest and push to Dockerhub Registry
#        run: |
#          docker pull "${IMAGE_NAME}"
#          docker tag "${IMAGE_NAME}" "cyberdojo/${{ env.KOSLI_FLOW }}:latest"
#          docker push "cyberdojo/${{ env.KOSLI_FLOW }}:latest"
