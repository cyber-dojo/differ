name: Main - reports Trails to https://staging.app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}          # False
  KOSLI_HOST: ${{ vars.KOSLI_HOST_STAGING }}        # https://staging.app.kosli.com
  KOSLI_ORG: ${{ vars.KOSLI_ORG }}                  # cyber-dojo
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}                # differ-ci
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_STAGING }}
  KOSLI_TRAIL: ${{ github.sha }}
  SERVICE_NAME: ${{ github.event.repository.name }} # differ

jobs:

  kosli-trail:
    runs-on: ubuntu-latest
    outputs:
      image_tag:   ${{ steps.variables.outputs.image_tag }}
      image_name:  ${{ steps.variables.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli Flow
        run:
          kosli create flow "${{ env.KOSLI_FLOW }}" 
            --description="UX for a group practice dashboard" 
            --template-file=.kosli.yml

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${{ env.KOSLI_TRAIL }}"

      - name: Set outputs
        id: variables
        run: |
          IMAGE_TAG=${GITHUB_SHA:0:7}
          echo "image_tag=${IMAGE_TAG}" >> ${GITHUB_OUTPUT}       
          echo "image_name=cyberdojo/${{ env.SERVICE_NAME }}:${IMAGE_TAG}" >> ${GITHUB_OUTPUT}          


  pull-request:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report pull-request evidence to Kosli Trail
        run:
          kosli attest pullrequest github
            --github-token=${{ secrets.GITHUB_TOKEN }}
            --name=differ.pull-request


  lint:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Run Rubocop linter on source, attest results to Kosli Trail
        env:
          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
        run: |
          mkdir -p "${KOSLI_ATTACHMENTS}"
          set +e
          make lint | tee "${KOSLI_ATTACHMENTS}"/rubocop.log
          STATUS=${PIPESTATUS[0]}
          set -e
          
          KOSLI_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
          cp .rubocop.yml "${KOSLI_ATTACHMENTS}"
          kosli attest generic \
            --attachments="${KOSLI_ATTACHMENTS}" \
            --compliant="${KOSLI_COMPLIANT}" \
            --name=differ.lint
          exit ${STATUS}                  


  build-image:
    needs: [kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:  ${{ needs.kosli-trail.outputs.image_name }}
    outputs:
      kosli_fingerprint: ${{ steps.variables.outputs.kosli_fingerprint }}
    steps:
      - uses: actions/checkout@v4

      - name: Wait for image to be built in main.yml
        run:
          ./sh/wait_for_image.sh "${IMAGE_NAME}"

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest image to Kosli Trail
        run:
          kosli attest artifact "${IMAGE_NAME}" 
            --artifact-type=docker          
            --name=differ

      - name: Set outputs
        id: variables
        run: |
          FINGERPRINT=$(kosli fingerprint "${IMAGE_NAME}" --artifact-type=docker)
          echo "kosli_fingerprint=${FINGERPRINT}" >> ${GITHUB_OUTPUT}


  unit-tests:
    needs: [build-image, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Run tests with branch-coverage
        run: |
          if make test ; then
            echo "KOSLI_COMPLIANT=true" >> ${GITHUB_ENV}
          else
            echo "KOSLI_COMPLIANT=false" >> ${GITHUB_ENV}
          fi

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest junit test results to Kosli Trail
        env:
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli attest junit "${IMAGE_NAME}" 
              --name=differ.unit-test 
              --results-dir=test/reports/junit

      - name: Attest branch-coverage results to Kosli Trail
        env:
          KOSLI_COMPLIANT: ${{ env.KOSLI_COMPLIANT }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli attest generic "${IMAGE_NAME}" 
              --attachments=./test/reports/evidence.json 
              --compliant=${KOSLI_COMPLIANT} 
              --description="server & client branch-coverage"                    
              --name=differ.branch-coverage


  snyk-container-scan:
    needs: [build-image, kosli-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk container scan and report results to Kosli Trail
        env:
          IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
          SARIF_FILENAME:    snyk.container.scan.json
          SNYK_TOKEN:        ${{ secrets.SNYK_TOKEN }}
        run: |
          set +e          
          snyk container test ${IMAGE_NAME} \
            --file=Dockerfile \
            --sarif \
            --sarif-file-output="${SARIF_FILENAME}" \
            --policy-path=.snyk
          set -e
          
          mkdir "${KOSLI_ATTACHMENTS}"
          cp .snyk "${KOSLI_ATTACHMENTS}"

          kosli attest snyk "${IMAGE_NAME}" \
            --name=differ.snyk-container-scan \
            --scan-results="${SARIF_FILENAME}"


  snyk-code-scan:
    needs: [build-image, kosli-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk code scan and report results to Kosli Trail
        env:
          IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
          KOSLI_ATTACHMENTS: /tmp/kosli_attachments
          SARIF_FILENAME:    snyk.code.scan.json
          SNYK_TOKEN:        ${{ secrets.SNYK_TOKEN }}
        run: |
          set +e          
          snyk code test \
            --sarif \
            --sarif-file-output="${SARIF_FILENAME}" \
            --policy-path=.snyk \
            .
          set -e

          mkdir "${KOSLI_ATTACHMENTS}"
          cp .snyk "${KOSLI_ATTACHMENTS}"

          kosli attest snyk "${IMAGE_NAME}" \
            --name=differ.snyk-code-scan \
            --scan-results="${SARIF_FILENAME}"


  sdlc-control-gate:
    needs: [pull-request, lint, unit-tests, snyk-container-scan, snyk-code-scan, kosli-trail, build-image]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit the Trail
        env:
          IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
          KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
        run:
          kosli assert artifact ${IMAGE_NAME}


  approve-deployment-to-beta:
    needs: [sdlc-control-gate, kosli-trail, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
      KOSLI_ENVIRONMENT: aws-beta
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run:
          kosli report approval ${IMAGE_NAME} 
            --approver="${{ github.actor }}"


  deploy-to-beta:
    needs: [approve-deployment-to-beta, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_ENVIRONMENT: aws-beta
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment to aws-beta in main.yml
        run:
          ./sh/wait_for_deployment.sh 
              "${IMAGE_NAME}" 
              "${{ env.KOSLI_HOST }}" 
              "${{ env.KOSLI_API_TOKEN }}" 
              "${{ env.KOSLI_ORG }}" 
              "${KOSLI_ENVIRONMENT}"


  attest-beta-artifacts:
    needs: [deploy-to-beta]
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Get Main Workflow Run Id
        id: get_main_workflow_run_id
        run: |
          workflow_id=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
          jq -r '.workflows[] | select(.path == ".github/workflows/main.yml") | .id')
          echo "Main Workflow ID is: $workflow_id"

          run_id=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" | \
          jq -r '.workflow_runs[0].id')
          echo "Main Workflow Run ID is: $run_id"
          echo "::set-output name=run_id::$run_id"

      - name: Download a plan artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf_artifacts_plan_beta
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_main_workflow_run_id.outputs.run_id }}

      - name: Download a state file artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf_artifacts_state_file_beta
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_main_workflow_run_id.outputs.run_id }}

      - name: Rename a state file artifact
        run: mv main.tfstate ${{ env.SERVICE_NAME }}.tfstate

      - name: Attest tf plan to Kosli trail
        run:
          kosli attest generic
            --name tf-plan-beta
            --flow ${{ env.KOSLI_FLOW }}
            --trail ${{ env.KOSLI_TRAIL }}
            --attachments ./tfplan
            --host ${{ env.KOSLI_HOST_STAGING }}
            --api-token ${{ secrets.KOSLI_API_TOKEN_STAGING }}

      - name: Delete tf plan artifact
        run: |
          # Get the list of artifacts
          artifact_id=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name == "tf_artifacts_plan_beta").id')

          # Delete each artifact
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/artifacts/${artifact_id}

      - name: Attest tf state artifact
        run: |
          kosli attest artifact \
            --artifact-type file ./${{ env.SERVICE_NAME }}.tfstate \
            --name state-beta \
            --flow ${{ env.KOSLI_FLOW }} \
            --trail ${{ env.KOSLI_TRAIL }} \
            --host ${{ env.KOSLI_HOST_STAGING }} \
            --api-token ${{ secrets.KOSLI_API_TOKEN_STAGING }}

      - name: Delete tf state file artifact
        run: |
          # Get the list of artifacts
          artifact_id=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/runs/${{ steps.get_main_workflow_run_id.outputs.run_id }}/artifacts | jq -r '.artifacts[] | select(.name == "tf_artifacts_state_file_beta").id')

          # Delete each artifact
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/artifacts/${artifact_id}


  approve-deployment-to-prod:
    needs: [attest-beta-artifacts, kosli-trail, build-image]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME:        ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_FINGERPRINT: ${{ needs.build-image.outputs.kosli_fingerprint }}
      KOSLI_ENVIRONMENT: aws-prod
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run:
          kosli report approval ${IMAGE_NAME} 
            --approver="${{ github.actor }}"


  deploy-to-prod:
    needs: [approve-deployment-to-prod, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
      KOSLI_ENVIRONMENT: aws-prod
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment to aws-prod in main.yml
        run:
          ./sh/wait_for_deployment.sh 
              "${IMAGE_NAME}" 
              "${{ env.KOSLI_HOST }}" 
              "${{ env.KOSLI_API_TOKEN }}" 
              "${{ env.KOSLI_ORG }}" 
              "${KOSLI_ENVIRONMENT}"
    

  attest-prod-artifacts:
    needs: [deploy-to-prod]
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version:
            ${{ vars.KOSLI_CLI_VERSION }}

      - name: Get Main Workflow Run Id
        id: get_main_workflow_run_id
        run: |
          workflow_id=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows" | \
          jq -r '.workflows[] | select(.path == ".github/workflows/main.yml") | .id')
          echo "Main Workflow ID is: $workflow_id"

          run_id=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" | \
          jq -r '.workflow_runs[0].id')
          echo "Main Workflow Run ID is: $run_id"
          echo "::set-output name=run_id::$run_id"

      - name: Download a plan artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf_artifacts_plan_prod
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_main_workflow_run_id.outputs.run_id }}

      - name: Download a state file artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf_artifacts_state_file_prod
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get_main_workflow_run_id.outputs.run_id }}

      - name: Rename a state file artifact
        run: mv main.tfstate ${{ needs.variables.outputs.service_name }}.tfstate

      - name: Attest tf plan to Kosli trail
        run:
          kosli attest generic
            --name tf-plan-prod
            --flow ${{ env.KOSLI_FLOW }}
            --trail ${{ env.KOSLI_TRAIL }}
            --attachments ./tfplan
            --host ${{ env.KOSLI_HOST_STAGING }}
            --api-token ${{ secrets.KOSLI_API_TOKEN_STAGING }}

      - name: Delete tf plan artifact
        run: |
          # Get the list of artifacts
          artifact_id=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/runs/${{ steps.get_main_workflow_run_id.outputs.run_id }}/artifacts | jq -r '.artifacts[] | select(.name == "tf_artifacts_plan_prod").id')

          # Delete each artifact
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/artifacts/${artifact_id}

      - name: Attest tf state artifact
        run: |
          kosli attest artifact \
            --artifact-type file ./${{ needs.variables.outputs.service_name }}.tfstate \
            --name state-prod \
            --flow ${{ env.KOSLI_FLOW }} \
            --trail ${{ env.KOSLI_TRAIL }} \
            --host ${{ env.KOSLI_HOST_STAGING }} \
            --api-token ${{ secrets.KOSLI_API_TOKEN_STAGING }}

      - name: Delete tf state file artifact
        run: |
          # Get the list of artifacts
          artifact_id=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/runs/${{ steps.get_main_workflow_run_id.outputs.run_id }}/artifacts | jq -r '.artifacts[] | select(.name == "tf_artifacts_state_file_prod").id')

          # Delete each artifact
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/artifacts/${artifact_id}


  push-latest:
    needs: [deploy-to-prod, kosli-trail]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.kosli-trail.outputs.image_name }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Tag image to :latest and push to Dockerhub Registry
        run: |
          docker pull "${IMAGE_NAME}"
          docker tag "${IMAGE_NAME}" "cyberdojo/${{ env.SERVICE_NAME }}:latest"
          docker push "cyberdojo/${{ env.SERVICE_NAME }}:latest"
