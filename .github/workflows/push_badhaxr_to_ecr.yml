name: Push badhaxr tagged image to ECR

on:
  workflow_dispatch:

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_ECR_ID: ${{ vars.AWS_ECR_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  DOCKER_API_VERSION: ${{ vars.DOCKER_API_VERSION }}

jobs:

  setup:
    runs-on: ubuntu-latest
    needs: []
    outputs:
      aws_account_id: ${{ steps.vars.outputs.aws_account_id }}
      aws_region: ${{ steps.vars.outputs.aws_region }}
      ecr_registry: ${{ steps.vars.outputs.ecr_registry }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}
    steps:
      - name: Prepare outputs for workflow jobs
        id: vars
        run: |
          ECR_REGISTRY="${AWS_ECR_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "aws_account_id=${AWS_ACCOUNT_ID}"             >> ${GITHUB_OUTPUT}
          echo "aws_region=${AWS_REGION}"                     >> ${GITHUB_OUTPUT}
          echo "ecr_registry=${ECR_REGISTRY}"                 >> ${GITHUB_OUTPUT}
          echo "gh_actions_iam_role_name=gh_actions_services" >> ${GITHUB_OUTPUT}          


  push-badhaxr-to-ecr:
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ needs.setup.outputs.aws_region }}
          role-duration-seconds: 900
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: arn:aws:iam::${{ needs.setup.outputs.aws_account_id }}:role/${{ needs.setup.outputs.gh_actions_iam_role_name }}
          mask-aws-account-id: no

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create badhaxr image tag and push to ECR
        run: |
          DOCKERHUB_IMAGE_NAME=cyberdojo/differ:badhaxr
          ECR_IMAGE_NAME="${{ needs.setup.outputs.ecr_registry }}/differ:badhaxr"
          docker pull "${DOCKERHUB_IMAGE_NAME}"
          docker tag "${DOCKERHUB_IMAGE_NAME}" "${ECR_IMAGE_NAME}"
          docker push "${ECR_IMAGE_NAME}"
