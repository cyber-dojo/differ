name: Sub - test image

on:
  workflow_call:
    secrets:
      KOSLI_API_TOKEN:
        required: true
      SNYK_TOKEN:
        required: true
    inputs:
      KOSLI_HOST:
        default: https://app.kosli.com
        required: false
        type: string
      KOSLI_ORG:
        default: cyber-dojo
        required: false
        type: string
      IMAGE_TAG:
        required: true
        type: string

env: 
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }}
  KOSLI_HOST: ${{ inputs.KOSLI_HOST }}
  KOSLI_ORG: ${{ inputs.KOSLI_ORG }}
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true

      - name: Run Rubocop linter on source
        run: |
          export LINT_EVIDENCE_DIR=/tmp/evidence/lint
          mkdir -p "${LINT_EVIDENCE_DIR}"
          gem install rubocop
          set +e
          rubocop --raise-cop-error . > "${LINT_EVIDENCE_DIR}"/rubocop.log
          STATUS=$?
          set -e
          export KOSLI_LINT_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
          # echo "KOSLI_LINT_COMPLIANT=${KOSLI_LINT_COMPLIANT}" >> ${GITHUB_ENV}

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report Rubocop results to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        # env:
        #   KOSLI_LINT_COMPLIANT: "${{ env.KOSLI_LINT_COMPLIANT }}"
        run:
          cp .rubocop.yml "${LINT_EVIDENCE_DIR}"          
          kosli report evidence commit generic
            --compliant="${KOSLI_LINT_COMPLIANT}"
            --evidence-paths="${LINT_EVIDENCE_DIR}"
            --name=lint

  report-image:
    # if: ${{ github.ref == 'refs/heads/main' }}
    # Can't put this here as dependent jobs (eg branch-coverage) don't run
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report image to Kosli flow
        run: |
          IMAGE_TAG="$(echo $GITHUB_SHA | head -c7)"
          IMAGE_NAME="cyberdojo/${{ env.KOSLI_FLOW }}:${IMAGE_TAG}"
          docker pull "${IMAGE_NAME}"
          kosli report artifact "${IMAGE_NAME}" \
            --artifact-type=docker

  branch-coverage:
    needs: report-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests, save results to evidence.json file
        run: |
          source ./sh/run_tests_with_coverage.sh
          if run_tests_with_coverage; then
            echo "KOSLI_COMPLIANT=true" >> ${GITHUB_ENV}
          else
            echo "KOSLI_COMPLIANT=false" >> ${GITHUB_ENV}
          fi

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report test results to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          KOSLI_LINT_COMPLIANT: "${{ env.KOSLI_LINT_COMPLIANT }}"
        run: |          
          IMAGE_NAME="cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}"
          kosli report evidence artifact junit "${IMAGE_NAME}" \
              --artifact-type=docker \
              --name=unit-test \
              --results-dir=test/reports/junit
          kosli report evidence artifact generic "${IMAGE_NAME}" \
              --artifact-type=docker \
              --compliant=${KOSLI_COMPLIANT} \
              --description="server & client branch-coverage reports" \
              --name=branch-coverage \
              --user-data=./test/reports/evidence.json

  snyk-scan:
    needs: report-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: ${{ github.ref == 'refs/heads/main' }}
        run:
           snyk container test cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }} 
             --file=Dockerfile 
             --json-file-output=snyk.json 
             --policy-path=.snyk

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report Snyk results to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
          docker pull ${IMAGE_NAME}
          kosli report evidence artifact snyk ${IMAGE_NAME} \
            --artifact-type=docker  \
            --name=snyk-scan  \
            --scan-results=snyk.json

  pull-request:
    needs: report-image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report pull-request evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
          docker pull ${IMAGE_NAME}
          kosli report evidence artifact pullrequest github ${IMAGE_NAME} \
            --artifact-type=docker \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --name=pull-request
