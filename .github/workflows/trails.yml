name: Reports Trails to https://app.kosli.com

on:
  push:
    branches:
      - main

env:
  KOSLI_DRY_RUN: ${{ vars.KOSLI_DRY_RUN }} # False
  KOSLI_HOST: ${{ vars.KOSLI_HOST }}       # https://app.kosli.com
  KOSLI_ORG: cyber-dojo-trails
  KOSLI_FLOW: ${{ vars.KOSLI_FLOW }}       # differ
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN_TRAILS }}

jobs:

  variables:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
    steps:
    - name: Prepare
      id: vars
      run:
        echo "image_name=cyberdojo/${{ env.KOSLI_FLOW }}:${GITHUB_SHA:0:7}" >> ${GITHUB_OUTPUT}

  begin-kosli-trail:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Create Kosli flow
        run:
          kosli create flow ${{ env.KOSLI_FLOW }} 
            --description="Diff files from two traffic-lights"
            --template-file=.kosli.yml

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${GITHUB_SHA}"


  lint:
    needs: [variables, begin-kosli-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Run Rubocop linter on source, report results to Kosli Trail
        run: |
          LINT_EVIDENCE_DIR=/tmp/evidence/lint
          mkdir -p "${LINT_EVIDENCE_DIR}"
          gem install rubocop
          set +e
          rubocop --raise-cop-error . > "${LINT_EVIDENCE_DIR}"/rubocop.log
          STATUS=$?
          set -e
          
          KOSLI_LINT_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
          cp .rubocop.yml "${LINT_EVIDENCE_DIR}"
          kosli attest generic \
            --compliant="${KOSLI_LINT_COMPLIANT}" \
            --evidence-paths="${LINT_EVIDENCE_DIR}" \
            --name=lint \
            --trail="${GITHUB_SHA}"
          exit $STATUS
                  

  pull-request:
    needs: [variables, begin-kosli-trail]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report pull-request evidence to Kosli
        run:
          kosli attest pullrequest github
            --github-token ${{ secrets.GITHUB_TOKEN }}
            --name=pull-request
            --trail="${GITHUB_SHA}"



  build-image:
    needs: [variables, begin-kosli-trail]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for image to be built in main.yml
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          ./sh/wait_for_image.sh "${IMAGE_NAME}"

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report image to Kosli flow
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                    
          docker pull "${IMAGE_NAME}"
          kosli attest artifact "${IMAGE_NAME}" \
            --artifact-type=docker \
            --name=differ \
            --trail="${GITHUB_SHA}"


  unit-tests:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests, save results to evidence.json file
        run: |
          source ./sh/run_tests_with_coverage.sh
          if run_tests_with_coverage; then
            echo "KOSLI_COMPLIANT=true" >> ${GITHUB_ENV}
          else
            echo "KOSLI_COMPLIANT=false" >> ${GITHUB_ENV}
          fi

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report test and coverage results to Kosli
        env:
          KOSLI_COMPLIANT: ${{ env.KOSLI_COMPLIANT }}
        run: |         
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                              
          kosli attest junit "${IMAGE_NAME}" \
              --artifact-type=docker \
              --name=differ.unit-test \
              --results-dir=test/reports/junit \
              --trail="${GITHUB_SHA}"
          
          kosli attest generic "${IMAGE_NAME}" \
              --artifact-type=docker \
              --compliant=${KOSLI_COMPLIANT} \
              --evidence-paths=./test/reports/evidence.json \
              --name=differ.branch-coverage \
              --trail="${GITHUB_SHA}"


  snyk-scan:
    needs: [variables, build-image]
    runs-on: ubuntu-latest
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          snyk container test ${IMAGE_NAME} \
            --file=Dockerfile \
            --json-file-output=snyk.json \
            --policy-path=.snyk

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report Snyk results to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          docker pull ${IMAGE_NAME}
          kosli attest snyk ${IMAGE_NAME} \
            --artifact-type=docker  \
            --name=differ.snyk-scan  \
            --scan-results=snyk.json \
            --trail="${GITHUB_SHA}"


  sdlc-control-gate:
    needs: [variables, lint, pull-request, unit-tests, snyk-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit-the-flow
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}                                                  
          docker pull ${IMAGE_NAME}
          kosli assert artifact ${IMAGE_NAME} \
            --artifact-type=docker          


  approve-deployment-to-beta:
    needs: [variables, sdlc-control-gate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          docker pull ${IMAGE_NAME}
          kosli report approval ${IMAGE_NAME} \
            --approver="${{ github.actor }}" \
            --artifact-type=docker \
            --environment=aws-beta

      - name: Report expected deployment to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          docker pull ${IMAGE_NAME}
          kosli expect deployment ${IMAGE_NAME} \
            --artifact-type=docker \
            --description="Deployed to aws-beta in Github Actions pipeline" \
            --environment=aws-beta


  deploy-to-beta:
    needs: [variables, approve-deployment-to-beta]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment in main.yml
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          ./sh/wait_for_deployment.sh \
             "${IMAGE_NAME}" \
             "${{ env.KOSLI_HOST }}" \
             "${{ env.KOSLI_API_TOKEN }}" \
             "${{ env.KOSLI_ORG }}" \
             aws-beta


  approve-deployment-to-prod:
    needs: [variables, deploy-to-beta]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report approval of deployment to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          docker pull ${IMAGE_NAME}
          kosli report approval ${IMAGE_NAME} \
            --approver="${{ github.actor }}" \
            --artifact-type=docker \
            --environment=aws-prod

      - name: Report expected deployment to Kosli
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
          docker pull ${IMAGE_NAME}
          kosli expect deployment ${IMAGE_NAME} \
            --artifact-type=docker \
            --description="Deployed to aws-prod in Github Actions pipeline" \
            --environment=aws-prod
    

  deploy-to-prod:
    needs: [variables, approve-deployment-to-prod]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4

      - name: Wait for deployment in main.yml
        run: |
          IMAGE_NAME=${{ needs.variables.outputs.image_name }}          
          ./sh/wait_for_deployment.sh \
             "${IMAGE_NAME}" \
             "${{ env.KOSLI_HOST }}" \
             "${{ env.KOSLI_API_TOKEN }}" \
             "${{ env.KOSLI_ORG }}" \
             aws-prod
    

#  push-latest:
#    needs: [variables, deploy-to-prod]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USER }}
#          password: ${{ secrets.DOCKER_PASS }}
#
#      - name: Build and push image:latest to Dockerhub Registry
#        run: |
#          IMAGE_NAME=${{ needs.variables.outputs.image_name }}
#          IMAGE_LATEST=cyberdojo/${{ env.KOSLI_FLOW }}:latest
#          docker pull ${IMAGE_NAME}
#          docker tag ${IMAGE_NAME} ${IMAGE_LATEST}
#          docker push ${IMAGE_LATEST}
