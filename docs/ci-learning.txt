
A single run: command like this, with continuation characters is wrong
        run:
          kosli report evidence commit generic \
            --compliant="${KOSLI_LINT_COMPLIANT}" \
            --evidence-paths="${LINT_EVIDENCE_DIR}" \
            --name=lint
In this case you cannot use continuation characters:
        run:
          kosli report evidence commit generic
            --compliant="${KOSLI_LINT_COMPLIANT}"
            --evidence-paths="${LINT_EVIDENCE_DIR}"
            --name=lint

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

A multi-line run: command, needs a | after run: and line continuation characters, like this:
        run: |
          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
          ./sh/wait_for_deployment.sh \
             "${IMAGE_NAME}" \
             "${{ env.KOSLI_HOST }}" \
             "${{ env.KOSLI_API_TOKEN }}" \
             "${{ env.KOSLI_ORG }}" \
             aws-prod

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

These are equivalent:
  build-image:
    needs: [variables, create-kosli-flow]

  build-image:
    needs:
      - variables
      - create-kosli-flow

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

These are equivalent:
  build-image:
    needs: [variables]

  build-image:
    needs: variables

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

You can't use if: to skip a job if another, unskipped job needs: it

  report-image:
    if: ${{ github.ref == 'refs/heads/main' }}
    ...

  branch-coverage:
    needs: report-image
    ...

This is particularly noticeable with the sdlc-control-gate job
which cannot be skipped.

Note, however that an if: can be safely applied to a run:

Github:
      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}

Gitlab does not support steps within a job, so you need to use:
  script:
    - if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ] ; then exit 0 ; fi

or:

  script:
    - set +e
    - command-that-can-fail
    - STATUS=$?
    - set -e
    - ...
    - if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ] ; then exit ${STATUS} ; fi
    - ...

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

If the ci-command being reported by kosli returns a non-zero exit code
when it does not succeed, the ci will likely, by default, exit the
job early meaning the following kosli report will NOT occur.
A simple way to ensure the kosli report runs is as follows:

    - set +e
    - command-that-can-fail
    - STATUS=$?
    - set -e
    - kosli ...
    - exit ${STATUS}

Another way is as follows, which relies on the kosli report command
also returning a non-zero exit-code when --compliant=false
(although note that this will return a different non-zero exit-code).

    run: |
      if [ command-that-can-fail ]; then
        echo "KOSLI_COMPLIANT=true" >> ${GITHUB_ENV}
      else
        echo "KOSLI_COMPLIANT=false" >> ${GITHUB_ENV}
      fi
      kosli report ... \
        --compliant=${KOSLI_COMPLIANT} \

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Another way to ensure the kosli report occurs is to use the
continue-on-error: and then do the report, and somewhere,
later in the workflow, run a kosli sdlc-control-gate
    kosli assert artifact ${IMAGE_NAME} --artifact-type=docker


For example:

  snyk-scan:
    needs: report-image
    runs-on: ubuntu-latest
    steps:

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: ${{ github.ref == 'refs/heads/main' }}
        run:
           snyk container test cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
             --file=Dockerfile
             --json-file-output=snyk.json
             --policy-path=.snyk

      - name: Setup Kosli CLI
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Report Snyk results to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          IMAGE_NAME=cyberdojo/${{ env.KOSLI_FLOW }}:${{ inputs.IMAGE_TAG }}
          docker pull ${IMAGE_NAME}
          kosli report evidence artifact snyk ${IMAGE_NAME} \
            --artifact-type=docker  \
            --name=snyk-scan  \
            --scan-results=snyk.json

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
